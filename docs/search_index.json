[["index.html", "Intro to R 1 Intro to R Bookdown", " Intro to R Adrien Osakwe Workshop Lead Larisa M. Soto Original Material Xiaoqi Xie Contributor 12 February, 2025 1 Intro to R Bookdown This ebook contains all of the Introduction to R Programming material hosted by the Quantitative Life Sciences - McGill initiative in Computational Medicine. "],["introduction-to-r.html", "2 Introduction to R 2.1 R Markdown File 2.2 Learning objectives 2.3 Comments 2.4 Syntax 2.5 Creating variables 2.6 Printing Variables", " 2 Introduction to R This workshop is beginner-level introduction to programming in R. The course is designed to be taught in two sessions of 3 hours each and is focused on the application of R to the analysis of tabular data from clinical trials. 2.1 R Markdown File R Markdown files act as notebooks which can make it easier to document and share code. All the results from the code as well as your comments and descriptions can be combined into one, tidy document. This makes it easy to combine insights, protocols and figures in a practical and organized fashion. 2.2 Learning objectives Basic Operations in R R Markdown vs. R Script RStudio IDE 2.3 Comments Comments are embedded into your code to help explain its purpose. This is extremely important for reproducibility and for documentation. # This is a comment line # print(&#39;hello world&#39;) 2.4 Syntax 2.5 Creating variables # The convention is to use left hand assignation var1 &lt;- 12 var2 &lt;- &quot;hello world&quot; 2.6 Printing Variables var1 ## [1] 12 var2 ## [1] &quot;hello world&quot; print(var1) ## [1] 12 print(var2) ## [1] &quot;hello world&quot; # It is also possible to use the &#39;=&#39; sign, but is NOT a good practice var1 = 13 var2 = &quot;hello world&quot; var1 ## [1] 13 var2 ## [1] &quot;hello world&quot; rm(&quot;var1&quot;) "],["data-types-and-data-structures.html", "3 Data types and data structures 3.1 Data Types 3.2 Atomic Classes 3.3 Arithmetic Operations 3.4 Logical operators 3.5 Exercise 3.6 Data Structures 3.7 Vectors 3.8 Lists 3.9 Factors 3.10 Exercise 3.11 Matrices 3.12 Data frames 3.13 Coercion 3.14 Hands on: Data types", " 3 Data types and data structures Learning objectives Understand the differences between classes, objects and data types in R Create objects of different types Subset and index objects Learn and use vectorized operations 3.1 Data Types 3.2 Atomic Classes Atomic classes are the fundamental data type found in R. All subsequent data structures are used to store entries of different atomic classes. 3.2.1 Numeric They store numbers as double, and it is stored with decimals. The term double refers to the number of bytes required to store it. Each double is accurate up to 16 significant digits. 3.2.2 Integer They store numbers that can be written without a decimal component. Adding an L after an integer tells R to store it as an integer class instead of a numeric 3.2.3 Logical They store the outputs of logical statements - TRUE or FALSE. Can be converted to integer where TRUE = 1 and FALSE = 0. 3.2.4 Character Represents text. Can either be a single character or a word/sentence. 3.2.5 Factor A form of character that is used for categorical information. Imposes an ordering to the different category known as a ‘level’. 3.2.6 Missing Value Used by R to indicate a missing data entry. Useful for manipulating data sets where missing entries are common. 3.3 Arithmetic Operations # Additon 2+100000 ## [1] 100002 # Subtraction 3-5 ## [1] -2 # Multiplication 71*9 ## [1] 639 # Division 90/((3*5) + 4) ## [1] 4.736842 # Power 2^3 ## [1] 8 3.4 Logical operators # First create two numeric variables var1 &lt;- 35 var2 &lt;- 27 # Equal to var1 == var2 ## [1] FALSE # Less than or equal to var1 &lt;= var2 ## [1] FALSE var1 != var2 ## [1] TRUE # They also work with other classes var1 &lt;- &quot;mango&quot; var2 &lt;- &quot;mangos&quot; var1 == var2 ## [1] FALSE Strings are compared character by character until they are not equal or there are no more characters left to compare. var1 &lt; var2 ## [1] TRUE We can test if a variable is contained in another object &quot;c&quot; %in% letters ## [1] TRUE &quot;c&quot; %in% LETTERS ## [1] FALSE 3.5 Exercise Write a piece of code that stores a number in a variable and then check if it is greater than 5. Try to use comments! Bonus: Is there a way to store the result after checking the number? 3.6 Data Structures 3.7 Vectors Key points: - Can only contain objects of the same class - Most basic type of R object - Variables are vectors 3.7.1 Numeric Creating a numeric vector using c() x &lt;- c(0.3, 0.1) x ## [1] 0.3 0.1 Using the vector() function x &lt;- vector(mode = &quot;numeric&quot;,length = 10) x ## [1] 0 0 0 0 0 0 0 0 0 0 Using the numeric() function x &lt;- numeric(length = 10) x ## [1] 0 0 0 0 0 0 0 0 0 0 Creating a numeric vector with a sequence of numbers # x &lt;- seq(1,10,1) # x x &lt;- seq(1,10,2) x ## [1] 1 3 5 7 9 x &lt;- rep(2,10) x ## [1] 2 2 2 2 2 2 2 2 2 2 Check length of vector with length() x ## [1] 2 2 2 2 2 2 2 2 2 2 length(x) ## [1] 10 y &lt;- rep(2,5) y ## [1] 2 2 2 2 2 length(y) ## [1] 5 length(x) == length(y) ## [1] FALSE 3.7.2 Integer Creating an integer vector using c() x &lt;- c(1L,2L,3L,4L,5L) x ## [1] 1 2 3 4 5 Creating an integer vector of a sequences of numbers x &lt;- 1:10 x ## [1] 1 2 3 4 5 6 7 8 9 10 3.7.3 Logical Creating a logical vector with c() x &lt;- c(TRUE,FALSE,T,F) x ## [1] TRUE FALSE TRUE FALSE Creating a logical vector with vector() x &lt;- vector(mode = &quot;logical&quot;,length = 5) x ## [1] FALSE FALSE FALSE FALSE FALSE Creating a logical vector using logical() x &lt;- logical(length = 10) x ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE 3.7.4 Character x&lt;-c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;) x ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; x&lt;-vector(mode = &quot;character&quot;,length=10) x ## [1] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; x&lt;-character(length = 3) x ## [1] &quot;&quot; &quot;&quot; &quot;&quot; Some useful functions to modify strings tolower(LETTERS) ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; toupper(letters) ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; paste(letters,1:length(letters),sep=&quot;_&quot;) # Note the implicit coercion ## [1] &quot;a_1&quot; &quot;b_2&quot; &quot;c_3&quot; &quot;d_4&quot; &quot;e_5&quot; &quot;f_6&quot; &quot;g_7&quot; &quot;h_8&quot; &quot;i_9&quot; &quot;j_10&quot; &quot;k_11&quot; &quot;l_12&quot; &quot;m_13&quot; &quot;n_14&quot; &quot;o_15&quot; &quot;p_16&quot; &quot;q_17&quot; &quot;r_18&quot; &quot;s_19&quot; &quot;t_20&quot; ## [21] &quot;u_21&quot; &quot;v_22&quot; &quot;w_23&quot; &quot;x_24&quot; &quot;y_25&quot; &quot;z_26&quot; 3.7.5 Vector attributes The elements of a vector can have names x&lt;-1:5 names(x)&lt;-c(&quot;one&quot;,&quot;two&quot;,&quot;three&quot;,&quot;four&quot;,&quot;five&quot;) x ## one two three four five ## 1 2 3 4 5 x&lt;-logical(length = 4) names(x)&lt;-c(&quot;F1&quot;,&quot;F2&quot;,&quot;F3&quot;,&quot;F4&quot;) x ## F1 F2 F3 F4 ## FALSE FALSE FALSE FALSE 3.7.6 Built-in functions To inspect the contents of a vector is.vector(x) # Check if it is a vector ## [1] TRUE is.na(x) # Check if it is empty ## F1 F2 F3 F4 ## FALSE FALSE FALSE FALSE is.null(x) # Check if it is NULL ## [1] FALSE is.numeric(x) # Check if it is numeric ## [1] FALSE is.logical(x) # Check if it is logical ## [1] TRUE is.character(x) # Check if it is character ## [1] FALSE To know what kind of vector you are working with class(x) # Atomic class type ## [1] &quot;logical&quot; typeof(x) # Object type or data structure (matrix, list, array...) ## [1] &quot;logical&quot; str(x) ## Named logi [1:4] FALSE FALSE FALSE FALSE ## - attr(*, &quot;names&quot;)= chr [1:4] &quot;F1&quot; &quot;F2&quot; &quot;F3&quot; &quot;F4&quot; To know more about the data contained in the vector Mathematical operations sum(x) ## [1] 0 min(x) ## [1] 0 max(x) ## [1] 0 x &lt;- seq(1,10,1) mean(x) ## [1] 5.5 median(x) ## [1] 5.5 sd(x) ## [1] 3.02765 log(x) ## [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 1.7917595 1.9459101 2.0794415 2.1972246 2.3025851 exp(x) ## [1] 2.718282 7.389056 20.085537 54.598150 148.413159 403.428793 1096.633158 2980.957987 8103.083928 22026.465795 Other operations length(x) ## [1] 10 table(x) ## x ## 1 2 3 4 5 6 7 8 9 10 ## 1 1 1 1 1 1 1 1 1 1 summary(x) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.00 3.25 5.50 5.50 7.75 10.00 3.7.7 Vector Operations x&lt;-1:10 y&lt;-11:20 x*2 ## [1] 2 4 6 8 10 12 14 16 18 20 x+y ## [1] 12 14 16 18 20 22 24 26 28 30 x*y ## [1] 11 24 39 56 75 96 119 144 171 200 x^y ## [1] 1.000000e+00 4.096000e+03 1.594323e+06 2.684355e+08 3.051758e+10 2.821110e+12 2.326305e+14 1.801440e+16 1.350852e+18 1.000000e+20 3.7.8 Recycling If one of the vectors is smaller than the other, operations are still possible. R will replicate the smaller vector to enable the operation to occur. IMPORTANT: if the larger vector is NOT a multiple of the smaller vector, the replication will still occur but will end at the length of the larger vector. x&lt;-1:10 y&lt;-c(1,2,3) x+y ## Warning in x + y: longer object length is not a multiple of shorter object length ## [1] 2 4 6 5 7 9 8 10 12 11 3.7.8.1 Exercise Calculate the sum of the following sequence of fractions: x = 1/(1^2) + 1/(2^2) + 1/(3^2) + ... + 1/(n^2) # n=100 sum(1/(1:100)^2) ## [1] 1.634984 # n=10000 sum(1/(1:10000)^2) ## [1] 1.644834 3.7.9 Indexing and subsetting For this example, lets create a vector of random numbers from 1 to 100 of size 15. x&lt;-sample(x = 1:100,size = 15,replace = F) x ## [1] 86 77 14 98 94 49 2 5 61 7 10 29 38 21 81 Using the index/position x[1] # Get the first element ## [1] 86 x[13] # Get the thirteenth element ## [1] 38 Using a vector of indices x[1:12] # The first 12 numbers ## [1] 86 77 14 98 94 49 2 5 61 7 10 29 x[c(1,5,6,8,9,13)] # Specific positions only ## [1] 86 94 49 5 61 38 names(x) &lt;- letters[1:length(x)] x[c(&#39;a&#39;,&#39;c&#39;,&#39;d&#39;)] ## a c d ## 86 14 98 Using a logical vector # Only numbers that are less than or equal to 10 x&lt;10 ## a b c d e f g h i j k l m n o ## FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE FALSE TRUE FALSE FALSE FALSE FALSE FALSE x[x&gt;95] ## d ## 98 # # # Only even numbers # x%%2 == 0 # x[x%%2 == 0] x&lt;10 ## a b c d e f g h i j k l m n o ## FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE FALSE TRUE FALSE FALSE FALSE FALSE FALSE x[x&lt;=10] # Only numbers that are less than or equal to 10 ## g h j k ## 2 5 7 10 Skipping elements using indices x[c(-1, -5)] ## b c d f g h i j k l m n o ## 77 14 98 49 2 5 61 7 10 29 38 21 81 Skipping elements using names x&lt;-1:10 names(x)&lt;-letters[1:10] x[names(x) != &quot;a&quot;] ## b c d e f g h i j ## 2 3 4 5 6 7 8 9 10 3.7.9.1 Exercise Find all the odd numbers in x 3.8 Lists Key points: - Can contain objects of multiple classes - Extremely powerful when combined with some R built-in functions Creating lists with different data types l &lt;- list(1:10, list(&quot;hello&quot;,&#39;hi&#39;), TRUE) l ## [[1]] ## [1] 1 2 3 4 5 6 7 8 9 10 ## ## [[2]] ## [[2]][[1]] ## [1] &quot;hello&quot; ## ## [[2]][[2]] ## [1] &quot;hi&quot; ## ## ## [[3]] ## [1] TRUE Assigning names as we create the list l&lt;-list(title = &quot;Numbers&quot;, numbers = 1:10, logic = TRUE ) l ## $title ## [1] &quot;Numbers&quot; ## ## $numbers ## [1] 1 2 3 4 5 6 7 8 9 10 ## ## $logic ## [1] TRUE names(l) ## [1] &quot;title&quot; &quot;numbers&quot; &quot;logic&quot; l$numbers ## [1] 1 2 3 4 5 6 7 8 9 10 3.8.1 Indexing and subsetting Using [[]] instead of [] l[[1]] ## [1] &quot;Numbers&quot; Using $ for named lists l$logic ## [1] TRUE 3.8.2 Built-in functions l&lt;-list(sample(1:100,10), sample(1:100,10), sample(1:100,10)) names(l)&lt;-c(&quot;r1&quot;,&quot;r2&quot;,&quot;r3&quot;) l ## $r1 ## [1] 68 95 47 30 77 18 42 73 100 19 ## ## $r2 ## [1] 44 66 85 13 92 90 36 38 79 22 ## ## $r3 ## [1] 99 98 81 73 64 36 14 61 52 89 Performing operations on all elements of the list using lapply lsums&lt;-lapply(l,sum) lsums ## $r1 ## [1] 569 ## ## $r2 ## [1] 565 ## ## $r3 ## [1] 667 lsums &lt;- lapply(l,function(a){ sum(a)^2 }) lsums ## $r1 ## [1] 323761 ## ## $r2 ## [1] 319225 ## ## $r3 ## [1] 444889 3.9 Factors Key points: Useful when for categorical data Can have implicit order, if needed Each element has a label or level They are important in statistical modelling and plotting with ggplot Some operations behave differently on factors Creating factors with factor cols&lt;-factor(x = c(rep(&quot;red&quot;,4),rep(&quot;blue&quot;,5),rep(&quot;green&quot;,2)), levels = c(&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;)) cols ## [1] red red red red blue blue blue blue blue green green ## Levels: red blue green samples &lt;- c(&quot;case&quot;, &quot;control&quot;, &quot;control&quot;, &quot;case&quot;) samples ## [1] &quot;case&quot; &quot;control&quot; &quot;control&quot; &quot;case&quot; samples_factor &lt;- factor(samples, levels = c(&quot;control&quot;, &quot;case&quot;)) samples_factor ## [1] case control control case ## Levels: control case str(samples_factor) ## Factor w/ 2 levels &quot;control&quot;,&quot;case&quot;: 2 1 1 2 3.10 Exercise See what happens when you convert a factor to a numeric in the code chunk below. What do you get? #Take the samples variable and convert it to a numeric #What function do you need to do this (hint: we used it a few chunks ago!) 3.10.1 Built-in functions Grouping elements in a vector using tapply measurements&lt;-sample(1:1000,6) samples&lt;-factor(c(rep(&quot;case&quot;,3),rep(&quot;control&quot;,3)), levels = c(&quot;control&quot;, &quot;case&quot;)) tapply(measurements, samples, mean) ## control case ## 614.3333 179.6667 3.11 Matrices Creating a matrix full of zeros with matrix() m&lt;-matrix(0, ncol=6, nrow=3) m ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] 0 0 0 0 0 0 ## [2,] 0 0 0 0 0 0 ## [3,] 0 0 0 0 0 0 class(m) ## [1] &quot;matrix&quot; &quot;array&quot; typeof(m) ## [1] &quot;double&quot; Creating a matrix from a vector of numbers m&lt;-matrix(1:5, ncol=2, nrow=5) m ## [,1] [,2] ## [1,] 1 1 ## [2,] 2 2 ## [3,] 3 3 ## [4,] 4 4 ## [5,] 5 5 3.11.1 Attributes Names of each dimension colnames(m)&lt;-letters[1:2] rownames(m)&lt;-LETTERS[1:5] m ## a b ## A 1 1 ## B 2 2 ## C 3 3 ## D 4 4 ## E 5 5 str(m) ## int [1:5, 1:2] 1 2 3 4 5 1 2 3 4 5 ## - attr(*, &quot;dimnames&quot;)=List of 2 ## ..$ : chr [1:5] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; ... ## ..$ : chr [1:2] &quot;a&quot; &quot;b&quot; 3.11.2 Built-in functions To know the size of the matrix dim(m) ## [1] 5 2 ncol(m) ## [1] 2 nrow(m) ## [1] 5 3.11.2.1 Exercise What do you think that length(m) will return? 3.12 Data frames Key points: Columns in data frames are vectors Each column can be of a different data type A data frame is essentially a list of vectors Creating a data frame using data.frame() df&lt;-data.frame(numbers=1:10, low_letters=letters[1:10], logical_values=rep(c(T,F),each=5)) df ## numbers low_letters logical_values ## 1 1 a TRUE ## 2 2 b TRUE ## 3 3 c TRUE ## 4 4 d TRUE ## 5 5 e TRUE ## 6 6 f FALSE ## 7 7 g FALSE ## 8 8 h FALSE ## 9 9 i FALSE ## 10 10 j FALSE class(df) ## [1] &quot;data.frame&quot; typeof(df) ## [1] &quot;list&quot; str(df) ## &#39;data.frame&#39;: 10 obs. of 3 variables: ## $ numbers : int 1 2 3 4 5 6 7 8 9 10 ## $ low_letters : chr &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; ... ## $ logical_values: logi TRUE TRUE TRUE TRUE TRUE FALSE ... Re-naming columns colnames(df)[2]&lt;-&quot;lowercase&quot; head(df) ## numbers lowercase logical_values ## 1 1 a TRUE ## 2 2 b TRUE ## 3 3 c TRUE ## 4 4 d TRUE ## 5 5 e TRUE ## 6 6 f FALSE View(df) 3.12.1 Indexing and sub-setting df$numbers ## [1] 1 2 3 4 5 6 7 8 9 10 df[&quot;numbers&quot;] ## numbers ## 1 1 ## 2 2 ## 3 3 ## 4 4 ## 5 5 ## 6 6 ## 7 7 ## 8 8 ## 9 9 ## 10 10 df[1,] ## numbers lowercase logical_values ## 1 1 a TRUE df[,1] ## [1] 1 2 3 4 5 6 7 8 9 10 df[3,3] ## [1] TRUE 3.13 Coercion Converting between data types with as. functions x&lt;-1:10 as.list(x) ## [[1]] ## [1] 1 ## ## [[2]] ## [1] 2 ## ## [[3]] ## [1] 3 ## ## [[4]] ## [1] 4 ## ## [[5]] ## [1] 5 ## ## [[6]] ## [1] 6 ## ## [[7]] ## [1] 7 ## ## [[8]] ## [1] 8 ## ## [[9]] ## [1] 9 ## ## [[10]] ## [1] 10 l&lt;-list(numbers=1:10, lowercase=letters[1:10]) l ## $numbers ## [1] 1 2 3 4 5 6 7 8 9 10 ## ## $lowercase ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; typeof(l) ## [1] &quot;list&quot; df&lt;-as.data.frame(l) df ## numbers lowercase ## 1 1 a ## 2 2 b ## 3 3 c ## 4 4 d ## 5 5 e ## 6 6 f ## 7 7 g ## 8 8 h ## 9 9 i ## 10 10 j typeof(df) ## [1] &quot;list&quot; 3.14 Hands on: Data types Make a matrix with the numbers 1:50, with 5 columns and 10 rows. Did the matrix function fill your matrix by column, or by row, as its default behavior? Create a list of length two containing a character vector for each of the data sections: (1) Data types and (2) Data structures. Populate each character vector with the names of the data types and data structures, respectively. There are several subtly different ways to call variables, observations and elements from data frames. Try them all and discuss with your team what they return. (Hint, use the function typeof()) Take the list you created in 3 and coerce it into a data frame. Then change the names of the columns to “dataTypes” and “dataStructures”. "],["control-structures-functions.html", "4 Control Structures &amp; Functions 4.1 Learning Objectives 4.2 Conditional Statements 4.3 For &amp; While Loops 4.4 Functions 4.5 Installing packages 4.6 Detour || Seeking help 4.7 Exercise", " 4 Control Structures &amp; Functions 4.1 Learning Objectives Understand If statements Understand for &amp; while loops Create new functions &amp; Install Packages 4.2 Conditional Statements We can tell our code to perform certain tasks if a certain condition is met. x &lt;- 5 #If the number is greater than 5, get its square if (x &gt; 5){ x^2 } else{ #If not, multiply it by 2 x*2 } ## [1] 10 # Can incorporate multiple conditions x &lt;- 7 if (x &gt; 5 &amp;&amp; x &lt; 10){ #If x is greater than 5 AND is less than 10 x^2 } else if ( x &lt; 0 || x &gt; 10){ #If x is less than 0 OR greater than 10 -x } else { x * 2 } ## [1] 49 4.3 For &amp; While Loops For loops let you iterate over the elements of a vector #Iterate from 1 to 10 for (i in 1:10){ print(i) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7 ## [1] 8 ## [1] 9 ## [1] 10 #Iterate through strings x &lt;- c(&#39;a&#39;,&#39;ab&#39;,&#39;cab&#39;,&#39;taxi&#39;) for (i in x){ print(i) } ## [1] &quot;a&quot; ## [1] &quot;ab&quot; ## [1] &quot;cab&quot; ## [1] &quot;taxi&quot; While loops let you iterate over a piece of code until a condition is no longer met. x &lt;- 5 #while x is greater than 0 while (x &gt; 0){ print(x) x &lt;- x -1 } ## [1] 5 ## [1] 4 ## [1] 3 ## [1] 2 ## [1] 1 4.4 Functions Sometimes, we need to repeatedly use a sequence of code. Creating functions helps reduce the amount of clutter in our code. #Example Function that calculates mean new_mean &lt;- function(values){ print(values) #return() sum(values)/length(values) } x &lt;- 1:5 mean(x) == new_mean(x) ## [1] 1 2 3 4 5 ## [1] TRUE 4.5 Installing packages There are multiple sources and ways to do this. CRAN install.packages(c(&quot;dplyr&quot;,&quot;ggplot2&quot;,&quot;gapminder&quot;,&quot;medicaldata&quot;)) BioConductor For more details about the project you can visit https://www.bioconductor.org To install packages from BioConductor you first need to install BioConductor itself. if (!require(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) BiocManager::install(version = &quot;3.16&quot;) Then you can install any package you want by using the install BiocManager::install(&quot;DESeq2&quot;) GitHub If you want to install the development version of a package, or you are installing something that is only available on GitHub you can use devtools devtools::install_github(&#39;andreacirilloac/updateR&#39;) library(ggplot2) 4.6 Detour || Seeking help The ? operator in R allows you to get more information about different functions and objects. This will open up the ‘help’ pane in the bottom right of RStudio which will show the documentation for the function/object. This is a great way to get more information. Concatenate function ?c() Print the description of an object str(iris) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... 4.7 Exercise Find the help page for the rnorm function. What does it do? Can you print its description? What does it say? #Find the help page for rnorm #Print the description 4.7.1 "],["basic-data-manipulation.html", "5 Basic data manipulation 5.1 Reading/writing data 5.2 Exploring data frames 5.3 Hands-on: basic data manipulation", " 5 Basic data manipulation Learning objectives Learn how to read/write data to/from files with different formats (.tsv, .csv) Familiarize with basic operations of data frames Index and subset data frames using base R functions Manipulate specific data frame columns Joining by columns and rows For this section we will use the package gapminder that we installed earlier. library(gapminder) dim(gapminder) ## [1] 1704 6 View the data frame View(gapminder) summary(gapminder$lifeExp) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 23.60 48.20 60.71 59.47 70.85 82.60 5.1 Reading/writing data 5.1.1 Text files Writing tables to a file using write.table() aust &lt;- gapminder[gapminder$country == &quot;Australia&quot;,] write.table(aust, file=&quot;../data/gapminder_australia.csv&quot;, sep=&quot;,&quot;) write.table(aust, file=&quot;../data/gapminder_australia.csv&quot;, sep=&quot;,&quot;, quote=FALSE, row.names=FALSE) write.table(aust, file=&quot;../data/gapminder_australia.tsv&quot;, sep=&quot;\\t&quot;, quote=FALSE, row.names=FALSE) Other functions to write to a file africa&lt;-gapminder[gapminder$continent==&quot;Africa&quot;,] write.csv(gapminder[gapminder$continent==&quot;Africa&quot;,], file = &quot;../data/gapminder_africa.csv&quot;, row.names = FALSE) class(africa$continent) ## [1] &quot;factor&quot; Reading data from a file africa&lt;-read.csv(&quot;../data/gapminder_africa.csv&quot;,sep = &quot;,&quot;,header = T) class(africa$continent) ## [1] &quot;character&quot; head(africa) ## country continent year lifeExp pop gdpPercap ## 1 Algeria Africa 1952 43.077 9279525 2449.008 ## 2 Algeria Africa 1957 45.685 10270856 3013.976 ## 3 Algeria Africa 1962 48.303 11000948 2550.817 ## 4 Algeria Africa 1967 51.407 12760499 3246.992 ## 5 Algeria Africa 1972 54.518 14760787 4182.664 ## 6 Algeria Africa 1977 58.014 17152804 4910.417 africa&lt;-read.table(&quot;../data/gapminder_africa.csv&quot;,sep = &quot;,&quot;,header = T,stringsAsFactors = T) class(africa$continent) ## [1] &quot;factor&quot; 5.1.2 R objects Using .RDS files saveRDS(africa,file = &quot;../objects/africa.RDS&quot;) africa&lt;-readRDS(file = &quot;../objects/africa.RDS&quot;) Using .RData files americas&lt;-gapminder[gapminder$continent==&quot;Americas&quot;,] save(africa,americas,file = &quot;../objects/continents.RData&quot;) load(file = &quot;../objects/continents.RData&quot;,verbose = T) ## Loading objects: ## africa ## americas 5.2 Exploring data frames 5.2.1 Adding columns and rows Individually adding columns mean_children &lt;- sample(1:10,nrow(aust),replace = TRUE) aust$mean_children &lt;- mean_children #head(aust) aust$GDP &lt;- aust$pop * aust$gdpPercap head(aust) ## # A tibble: 6 × 8 ## country continent year lifeExp pop gdpPercap mean_children GDP ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Australia Oceania 1952 69.1 8691212 10040. 7 87256254102. ## 2 Australia Oceania 1957 70.3 9712569 10950. 5 106349227169. ## 3 Australia Oceania 1962 70.9 10794968 12217. 3 131884573002. ## 4 Australia Oceania 1967 71.1 11872264 14526. 10 172457986742. ## 5 Australia Oceania 1972 71.9 13177000 16789. 1 221223770658. ## 6 Australia Oceania 1977 73.5 14074100 18334. 10 258037329175. mean_bikes &lt;- sample(1:4,nrow(aust),replace = TRUE) # Check what happens if they don&#39;t have the same number of rows aust[,&quot;mean_bikes&quot;]&lt;-mean_bikes head(aust) ## # A tibble: 6 × 9 ## country continent year lifeExp pop gdpPercap mean_children GDP mean_bikes ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 Australia Oceania 1952 69.1 8691212 10040. 7 87256254102. 2 ## 2 Australia Oceania 1957 70.3 9712569 10950. 5 106349227169. 4 ## 3 Australia Oceania 1962 70.9 10794968 12217. 3 131884573002. 3 ## 4 Australia Oceania 1967 71.1 11872264 14526. 10 172457986742. 2 ## 5 Australia Oceania 1972 71.9 13177000 16789. 1 221223770658. 2 ## 6 Australia Oceania 1977 73.5 14074100 18334. 10 258037329175. 3 Combining data frames aust &lt;- gapminder[gapminder$country==&quot;Australia&quot;,] df &lt;- data.frame(mean_children=sample(1:10,nrow(aust),replace = TRUE), mean_bikes=sample(1:4,nrow(aust),replace = TRUE)) head(df) ## mean_children mean_bikes ## 1 10 3 ## 2 6 3 ## 3 9 1 ## 4 1 3 ## 5 5 4 ## 6 3 3 aust &lt;- cbind(aust,df) head(aust) ## country continent year lifeExp pop gdpPercap mean_children mean_bikes ## 1 Australia Oceania 1952 69.12 8691212 10039.60 10 3 ## 2 Australia Oceania 1957 70.33 9712569 10949.65 6 3 ## 3 Australia Oceania 1962 70.93 10794968 12217.23 9 1 ## 4 Australia Oceania 1967 71.10 11872264 14526.12 1 3 ## 5 Australia Oceania 1972 71.93 13177000 16788.63 5 4 ## 6 Australia Oceania 1977 73.49 14074100 18334.20 3 3 Individually adding rows new_row&lt;-list(&quot;country&quot; = &quot;Australia&quot;, &quot;continent&quot; = &quot;Oceania&quot;, &quot;year&quot; = 2022, &quot;lifeExp&quot; = mean(aust$lifeExp), &quot;pop&quot; = mean(aust$pop), &quot;gdpPercap&quot; = mean(aust$gdpPercap), &quot;mean_children&quot; = floor(mean(aust$mean_children)), &quot;mean_bikes&quot; = floor(mean(aust$mean_children))) # Why did I create it as list? new_row ## $country ## [1] &quot;Australia&quot; ## ## $continent ## [1] &quot;Oceania&quot; ## ## $year ## [1] 2022 ## ## $lifeExp ## [1] 74.66292 ## ## $pop ## [1] 14649313 ## ## $gdpPercap ## [1] 19980.6 ## ## $mean_children ## [1] 5 ## ## $mean_bikes ## [1] 5 aust&lt;-rbind(aust,new_row) tail(aust) ## country continent year lifeExp pop gdpPercap mean_children mean_bikes ## 8 Australia Oceania 1987 76.32000 16257249 21888.89 5 2 ## 9 Australia Oceania 1992 77.56000 17481977 23424.77 6 2 ## 10 Australia Oceania 1997 78.83000 18565243 26997.94 8 1 ## 11 Australia Oceania 2002 80.37000 19546792 30687.75 9 3 ## 12 Australia Oceania 2007 81.23500 20434176 34435.37 1 2 ## 13 Australia Oceania 2022 74.66292 14649313 19980.60 5 5 Combining data frames by rows dim(aust) ## [1] 13 8 aust_double&lt;-rbind(aust,aust) dim(aust_double) ## [1] 26 8 5.2.2 Removing columns and rows aust&lt;-aust[,-ncol(aust)]# remove the last column head(aust) ## country continent year lifeExp pop gdpPercap mean_children ## 1 Australia Oceania 1952 69.12 8691212 10039.60 10 ## 2 Australia Oceania 1957 70.33 9712569 10949.65 6 ## 3 Australia Oceania 1962 70.93 10794968 12217.23 9 ## 4 Australia Oceania 1967 71.10 11872264 14526.12 1 ## 5 Australia Oceania 1972 71.93 13177000 16788.63 5 ## 6 Australia Oceania 1977 73.49 14074100 18334.20 3 aust&lt;-aust[,colnames(aust)!=&quot;mean_children&quot;]# remove column by name head(aust) ## country continent year lifeExp pop gdpPercap ## 1 Australia Oceania 1952 69.12 8691212 10039.60 ## 2 Australia Oceania 1957 70.33 9712569 10949.65 ## 3 Australia Oceania 1962 70.93 10794968 12217.23 ## 4 Australia Oceania 1967 71.10 11872264 14526.12 ## 5 Australia Oceania 1972 71.93 13177000 16788.63 ## 6 Australia Oceania 1977 73.49 14074100 18334.20 dim(aust[-1,]) # Remove the first row ## [1] 12 6 dim(aust[-1*1:10,]) # Remove the first 10 rows ## [1] 3 6 5.2.3 Applying filters aust[aust$lifeExp&gt;=70,] ## country continent year lifeExp pop gdpPercap ## 2 Australia Oceania 1957 70.33000 9712569 10949.65 ## 3 Australia Oceania 1962 70.93000 10794968 12217.23 ## 4 Australia Oceania 1967 71.10000 11872264 14526.12 ## 5 Australia Oceania 1972 71.93000 13177000 16788.63 ## 6 Australia Oceania 1977 73.49000 14074100 18334.20 ## 7 Australia Oceania 1982 74.74000 15184200 19477.01 ## 8 Australia Oceania 1987 76.32000 16257249 21888.89 ## 9 Australia Oceania 1992 77.56000 17481977 23424.77 ## 10 Australia Oceania 1997 78.83000 18565243 26997.94 ## 11 Australia Oceania 2002 80.37000 19546792 30687.75 ## 12 Australia Oceania 2007 81.23500 20434176 34435.37 ## 13 Australia Oceania 2022 74.66292 14649313 19980.60 aust[aust$gdpPercap&gt;=mean(aust$gdpPercap),] ## country continent year lifeExp pop gdpPercap ## 8 Australia Oceania 1987 76.32000 16257249 21888.89 ## 9 Australia Oceania 1992 77.56000 17481977 23424.77 ## 10 Australia Oceania 1997 78.83000 18565243 26997.94 ## 11 Australia Oceania 2002 80.37000 19546792 30687.75 ## 12 Australia Oceania 2007 81.23500 20434176 34435.37 ## 13 Australia Oceania 2022 74.66292 14649313 19980.60 How to get unique entries/remove duplicates unique(aust_double) ## country continent year lifeExp pop gdpPercap mean_children mean_bikes ## 1 Australia Oceania 1952 69.12000 8691212 10039.60 10 3 ## 2 Australia Oceania 1957 70.33000 9712569 10949.65 6 3 ## 3 Australia Oceania 1962 70.93000 10794968 12217.23 9 1 ## 4 Australia Oceania 1967 71.10000 11872264 14526.12 1 3 ## 5 Australia Oceania 1972 71.93000 13177000 16788.63 5 4 ## 6 Australia Oceania 1977 73.49000 14074100 18334.20 3 3 ## 7 Australia Oceania 1982 74.74000 15184200 19477.01 8 4 ## 8 Australia Oceania 1987 76.32000 16257249 21888.89 5 2 ## 9 Australia Oceania 1992 77.56000 17481977 23424.77 6 2 ## 10 Australia Oceania 1997 78.83000 18565243 26997.94 8 1 ## 11 Australia Oceania 2002 80.37000 19546792 30687.75 9 3 ## 12 Australia Oceania 2007 81.23500 20434176 34435.37 1 2 ## 13 Australia Oceania 2022 74.66292 14649313 19980.60 5 5 To remove empty rows # First lets add an empty row na.list&lt;-rep(NA,ncol(aust)) aust&lt;-rbind(aust,na.list) tail(aust) ## country continent year lifeExp pop gdpPercap ## 9 Australia Oceania 1992 77.56000 17481977 23424.77 ## 10 Australia Oceania 1997 78.83000 18565243 26997.94 ## 11 Australia Oceania 2002 80.37000 19546792 30687.75 ## 12 Australia Oceania 2007 81.23500 20434176 34435.37 ## 13 Australia Oceania 2022 74.66292 14649313 19980.60 ## 14 &lt;NA&gt; &lt;NA&gt; NA NA NA NA aust&lt;-aust[!is.na(aust$country),] tail(aust) ## country continent year lifeExp pop gdpPercap ## 8 Australia Oceania 1987 76.32000 16257249 21888.89 ## 9 Australia Oceania 1992 77.56000 17481977 23424.77 ## 10 Australia Oceania 1997 78.83000 18565243 26997.94 ## 11 Australia Oceania 2002 80.37000 19546792 30687.75 ## 12 Australia Oceania 2007 81.23500 20434176 34435.37 ## 13 Australia Oceania 2022 74.66292 14649313 19980.60 5.2.4 Editing specific elements aust[1,&quot;lifeExp&quot;]&lt;-aust[1,&quot;lifeExp&quot;]+1 5.3 Hands-on: basic data manipulation Write a data processing snippet to include only the data points collected after 1995 in Asian countries as a CSV file. Separate the gapminder data frame into 5 individual data frames, one for each continent. Store those 5 data frames as an RData file called continents.RData in the objects folder. Finish exploring the gapminder data frame and: Find the number of rows and the number of columns Print the data type of each column Explain the meaning of everything that str(gapminder) prints In which years has the GDP of Canada been larger than the average of all data points recorded for Canada? Find the mean life expectancy of Switzerland before and after 2000 You discovered that all the entries from 2007 are actually from 2008. Create a copy of the full gapminder data frame in an object called gp. Then change the year column to correct the entries from 2007. Bonus - Find the mean life expectancy and mean gdp per continent using the function tapply "],["advanced-data-manipulation.html", "6 Advanced data manipulation 6.1 Manipulation with dplyr 6.2 Hands-on advanced data manipulation", " 6 Advanced data manipulation Learning objectives Become familiar with the dplyr syntax Create pipes with the operator %&gt;% Perform operations on data frames using dplyr and tidyr functions Implement functions from other external packages There are several packages that allow for more sophisticated processing operations to be done faster. We will take a look at some functions from one of them. I encourage you to look into plyr and tidyr after this workshop. 6.1 Manipulation with dplyr We often need to select certain observations (rows) or variables (columns), or group the data by certain variable(s) to calculate some summary statistics. Although these operations can be done using base R functions, they require the creation of multiple intermediate objects and a lot of code repetition. There are two packages that provide functions to streamline common operations on tabular data and make the code look nicer and cleaner. These packages are part of a broader family called tidyverse, for more information you can visit https://www.tidyverse.org/. We will cover 5 of the most commonly used functions and combine them using pipes (%&gt;%): 1. select() - used to extract data 2. filter() - to filter entries using logical vectors 3. group_by() - to solve the split-apply-combine problem 4. summarize() - to obtain summary statistics 5. mutate() - to create new columns library(tidyr) 6.1.1 Introducing pipes gapminder %&gt;% head() ## # A tibble: 6 × 6 ## country continent year lifeExp pop gdpPercap ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Afghanistan Asia 1952 28.8 8425333 779. ## 2 Afghanistan Asia 1957 30.3 9240934 821. ## 3 Afghanistan Asia 1962 32.0 10267083 853. ## 4 Afghanistan Asia 1967 34.0 11537966 836. ## 5 Afghanistan Asia 1972 36.1 13079460 740. ## 6 Afghanistan Asia 1977 38.4 14880372 786. gapminder %&gt;% tail() ## # A tibble: 6 × 6 ## country continent year lifeExp pop gdpPercap ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Zimbabwe Africa 1982 60.4 7636524 789. ## 2 Zimbabwe Africa 1987 62.4 9216418 706. ## 3 Zimbabwe Africa 1992 60.4 10704340 693. ## 4 Zimbabwe Africa 1997 46.8 11404948 792. ## 5 Zimbabwe Africa 2002 40.0 11926563 672. ## 6 Zimbabwe Africa 2007 43.5 12311143 470. 6.1.2 Using select() To subset a data frame dplyr::select(.data = gapminder, year, country, gdpPercap) %&gt;% head() ## # A tibble: 6 × 3 ## year country gdpPercap ## &lt;int&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 1952 Afghanistan 779. ## 2 1957 Afghanistan 821. ## 3 1962 Afghanistan 853. ## 4 1967 Afghanistan 836. ## 5 1972 Afghanistan 740. ## 6 1977 Afghanistan 786. To remove columns dplyr::select(.data = gapminder, -continent) %&gt;% head() ## # A tibble: 6 × 5 ## country year lifeExp pop gdpPercap ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Afghanistan 1952 28.8 8425333 779. ## 2 Afghanistan 1957 30.3 9240934 821. ## 3 Afghanistan 1962 32.0 10267083 853. ## 4 Afghanistan 1967 34.0 11537966 836. ## 5 Afghanistan 1972 36.1 13079460 740. ## 6 Afghanistan 1977 38.4 14880372 786. gapminder %&gt;% dplyr::select(year, country, gdpPercap) %&gt;% head() ## # A tibble: 6 × 3 ## year country gdpPercap ## &lt;int&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 1952 Afghanistan 779. ## 2 1957 Afghanistan 821. ## 3 1962 Afghanistan 853. ## 4 1967 Afghanistan 836. ## 5 1972 Afghanistan 740. ## 6 1977 Afghanistan 786. 6.1.3 Using filter() Include only European countries and select the columns year, country and gdpPercap gapminder %&gt;% dplyr::filter(continent == &quot;Europe&quot;) %&gt;% dplyr::select(year, country, gdpPercap) %&gt;% head() ## # A tibble: 6 × 3 ## year country gdpPercap ## &lt;int&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 1952 Albania 1601. ## 2 1957 Albania 1942. ## 3 1962 Albania 2313. ## 4 1967 Albania 2760. ## 5 1972 Albania 3313. ## 6 1977 Albania 3533. Using multiple filters at once gapminder %&gt;% dplyr::filter(continent == &quot;Europe&quot;, year == 2007) %&gt;% dplyr::select(country, lifeExp) ## # A tibble: 30 × 2 ## country lifeExp ## &lt;fct&gt; &lt;dbl&gt; ## 1 Albania 76.4 ## 2 Austria 79.8 ## 3 Belgium 79.4 ## 4 Bosnia and Herzegovina 74.9 ## 5 Bulgaria 73.0 ## 6 Croatia 75.7 ## 7 Czech Republic 76.5 ## 8 Denmark 78.3 ## 9 Finland 79.3 ## 10 France 80.7 ## # ℹ 20 more rows Extract unique entries gapminder %&gt;% dplyr::select(country, continent) %&gt;% dplyr::distinct() ## # A tibble: 142 × 2 ## country continent ## &lt;fct&gt; &lt;fct&gt; ## 1 Afghanistan Asia ## 2 Albania Europe ## 3 Algeria Africa ## 4 Angola Africa ## 5 Argentina Americas ## 6 Australia Oceania ## 7 Austria Europe ## 8 Bahrain Asia ## 9 Bangladesh Asia ## 10 Belgium Europe ## # ℹ 132 more rows Order according to a column gapminder %&gt;% dplyr::select(country, continent,year,pop) %&gt;% dplyr::arrange(desc(pop)) %&gt;% head() ## # A tibble: 6 × 4 ## country continent year pop ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; ## 1 China Asia 2007 1318683096 ## 2 China Asia 2002 1280400000 ## 3 China Asia 1997 1230075000 ## 4 China Asia 1992 1164970000 ## 5 India Asia 2007 1110396331 ## 6 China Asia 1987 1084035000 6.1.4 Using group_by() It internally groups observations based on the specified variable(s) str(gapminder) ## tibble [1,704 × 6] (S3: tbl_df/tbl/data.frame) ## $ country : Factor w/ 142 levels &quot;Afghanistan&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ continent: Factor w/ 5 levels &quot;Africa&quot;,&quot;Americas&quot;,..: 3 3 3 3 3 3 3 3 3 3 ... ## $ year : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ... ## $ lifeExp : num [1:1704] 28.8 30.3 32 34 36.1 ... ## $ pop : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ... ## $ gdpPercap: num [1:1704] 779 821 853 836 740 ... str(gapminder %&gt;% dplyr::group_by(continent)) ## gropd_df [1,704 × 6] (S3: grouped_df/tbl_df/tbl/data.frame) ## $ country : Factor w/ 142 levels &quot;Afghanistan&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ continent: Factor w/ 5 levels &quot;Africa&quot;,&quot;Americas&quot;,..: 3 3 3 3 3 3 3 3 3 3 ... ## $ year : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ... ## $ lifeExp : num [1:1704] 28.8 30.3 32 34 36.1 ... ## $ pop : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ... ## $ gdpPercap: num [1:1704] 779 821 853 836 740 ... ## - attr(*, &quot;groups&quot;)= tibble [5 × 2] (S3: tbl_df/tbl/data.frame) ## ..$ continent: Factor w/ 5 levels &quot;Africa&quot;,&quot;Americas&quot;,..: 1 2 3 4 5 ## ..$ .rows : list&lt;int&gt; [1:5] ## .. ..$ : int [1:624] 25 26 27 28 29 30 31 32 33 34 ... ## .. ..$ : int [1:300] 49 50 51 52 53 54 55 56 57 58 ... ## .. ..$ : int [1:396] 1 2 3 4 5 6 7 8 9 10 ... ## .. ..$ : int [1:360] 13 14 15 16 17 18 19 20 21 22 ... ## .. ..$ : int [1:24] 61 62 63 64 65 66 67 68 69 70 ... ## .. ..@ ptype: int(0) ## ..- attr(*, &quot;.drop&quot;)= logi TRUE 6.1.5 Using summarize() gdp_c &lt;- gapminder %&gt;% dplyr::group_by(continent) %&gt;% dplyr::summarize(mean_gdpPercap = mean(gdpPercap)) gdp_c ## # A tibble: 5 × 2 ## continent mean_gdpPercap ## &lt;fct&gt; &lt;dbl&gt; ## 1 Africa 2194. ## 2 Americas 7136. ## 3 Asia 7902. ## 4 Europe 14469. ## 5 Oceania 18622. Combine multiple summary statistics gapminder %&gt;% dplyr::group_by(continent) %&gt;% dplyr::summarize(mean_le = mean(lifeExp), min_le = min(lifeExp), max_le = max(lifeExp), se_le = sd(lifeExp)/sqrt(dplyr::n())) ## # A tibble: 5 × 5 ## continent mean_le min_le max_le se_le ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Africa 48.9 23.6 76.4 0.366 ## 2 Americas 64.7 37.6 80.7 0.540 ## 3 Asia 60.1 28.8 82.6 0.596 ## 4 Europe 71.9 43.6 81.8 0.286 ## 5 Oceania 74.3 69.1 81.2 0.775 6.1.6 Using mutate() gapminder %&gt;% dplyr::mutate(gdp_billion = gdpPercap*pop/10^9) ## # A tibble: 1,704 × 7 ## country continent year lifeExp pop gdpPercap gdp_billion ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Afghanistan Asia 1952 28.8 8425333 779. 6.57 ## 2 Afghanistan Asia 1957 30.3 9240934 821. 7.59 ## 3 Afghanistan Asia 1962 32.0 10267083 853. 8.76 ## 4 Afghanistan Asia 1967 34.0 11537966 836. 9.65 ## 5 Afghanistan Asia 1972 36.1 13079460 740. 9.68 ## 6 Afghanistan Asia 1977 38.4 14880372 786. 11.7 ## 7 Afghanistan Asia 1982 39.9 12881816 978. 12.6 ## 8 Afghanistan Asia 1987 40.8 13867957 852. 11.8 ## 9 Afghanistan Asia 1992 41.7 16317921 649. 10.6 ## 10 Afghanistan Asia 1997 41.8 22227415 635. 14.1 ## # ℹ 1,694 more rows 6.1.7 Putting them all together gdp_pop_ext &lt;-gapminder %&gt;% dplyr::mutate(gdp_billion = gdpPercap*pop/10^9) %&gt;% dplyr::group_by(continent,year) %&gt;% dplyr::summarize(mean_gdpPercap = mean(gdpPercap), sd_gdpPercap = sd(gdpPercap), mean_pop = mean(pop), sd_pop = sd(pop), mean_gdp_billion = mean(gdp_billion), sd_gdp_billion = sd(gdp_billion)) ## `summarise()` has grouped output by &#39;continent&#39;. You can override using the `.groups` argument. gdp_pop_ext ## # A tibble: 60 × 8 ## # Groups: continent [5] ## continent year mean_gdpPercap sd_gdpPercap mean_pop sd_pop mean_gdp_billion sd_gdp_billion ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Africa 1952 1253. 983. 4570010. 6317450. 5.99 11.4 ## 2 Africa 1957 1385. 1135. 5093033. 7076042. 7.36 14.5 ## 3 Africa 1962 1598. 1462. 5702247. 7957545. 8.78 17.2 ## 4 Africa 1967 2050. 2848. 6447875. 8985505. 11.4 23.2 ## 5 Africa 1972 2340. 3287. 7305376. 10130833. 15.1 30.4 ## 6 Africa 1977 2586. 4142. 8328097. 11585184. 18.7 38.1 ## 7 Africa 1982 2482. 3243. 9602857. 13456243. 22.0 46.6 ## 8 Africa 1987 2283. 2567. 11054502. 15277484. 24.1 51.4 ## 9 Africa 1992 2282. 2644. 12674645. 17562719. 26.3 55.1 ## 10 Africa 1997 2379. 2821. 14304480. 19873013. 30.0 63.0 ## # ℹ 50 more rows 6.2 Hands-on advanced data manipulation Write one command (it can span multiple lines) using pipes that will output a data frame that has only the columns lifeExp, country and year for the records before the year 2000 from African countries, but not for other Continents. Calculate the average life expectancy per country. Which country has the longest average life expectancy and which one the shortest average life expectancy? In the previous hands-on you discovered that all the entries from 2007 are actually from 2008. Write a command to edit the data accordingly using pipes. In the same command filter only the entries from 2008 to verify the change. "],["generating-visual-outputs.html", "7 Generating visual outputs 7.1 Graphics with base R 7.2 Graphics with ggplot2", " 7 Generating visual outputs 7.1 Graphics with base R hist(gapminder$lifeExp,xlab=&quot;Life expectancy&quot;,main = &#39;Histogram of Life Expectancy&#39;) Arrange figures into multiple panels with par df&lt;-gapminder[gapminder$country==&quot;Switzerland&quot;,] par(mfrow=c(1,3)) plot(y = df$lifeExp,x=df$year,xlab=&quot;Years&quot;,ylab=&quot;Life expectancy&quot;) plot(y = df$pop,x=df$year,xlab=&quot;Years&quot;,ylab=&quot;Population size&quot;) plot(y = df$gdpPercap,x=df$year,xlab=&quot;Years&quot;,ylab=&quot;GDP per capita&quot;) df&lt;-gapminder[gapminder$country==&quot;Zimbabwe&quot;,] par(mfrow=c(1,3)) plot(y = df$lifeExp,x=df$year,xlab=&quot;Years&quot;,ylab=&quot;Life expectancy&quot;) plot(y = df$pop,x=df$year,xlab=&quot;Years&quot;,ylab=&quot;Population size&quot;) plot(y = df$gdpPercap,x=df$year,xlab=&quot;Years&quot;,ylab=&quot;GDP per capita&quot;) 7.2 Graphics with ggplot2 library(ggplot2) We can look at multiple countries at the same time in a prettier way df&lt;-gapminder %&gt;% dplyr::mutate(country = as.character(country)) %&gt;% dplyr::filter(country %in% c(&quot;Switzerland&quot;,&quot;Australia&quot;,&quot;Zimbabwe&quot;,&quot;India&quot;)) ggplot(df,aes(x=year,y=lifeExp,color=country)) + geom_point()+ geom_line() ggplot(df,aes(x=year,y=gdpPercap,color=country))+ geom_point()+ geom_line() Now, let’s plot the mean GDP per-capita over time for each continent gdp_c &lt;- gapminder %&gt;% dplyr::group_by(continent,year) %&gt;% dplyr::summarize(mean_gdpPercap = mean(gdpPercap), mean_le = mean(lifeExp), min_le = min(lifeExp), max_le = max(lifeExp), se_le = sd(lifeExp)/sqrt(dplyr::n())) ## `summarise()` has grouped output by &#39;continent&#39;. You can override using the `.groups` argument. head(gdp_c) ## # A tibble: 6 × 7 ## # Groups: continent [1] ## continent year mean_gdpPercap mean_le min_le max_le se_le ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Africa 1952 1253. 39.1 30 52.7 0.714 ## 2 Africa 1957 1385. 41.3 31.6 58.1 0.779 ## 3 Africa 1962 1598. 43.3 32.8 60.2 0.815 ## 4 Africa 1967 2050. 45.3 34.1 61.6 0.844 ## 5 Africa 1972 2340. 47.5 35.4 64.3 0.890 ## 6 Africa 1977 2586. 49.6 36.8 67.1 0.944 ggplot(gdp_c,aes(x=year,y=mean_gdpPercap,color=continent))+ geom_point()+ geom_line() We can pipe objects directly into the ggplot() function: gdp_c %&gt;% ggplot(aes(x=year,y=mean_gdpPercap,color=continent))+ geom_point()+ geom_line() And even do this: gapminder %&gt;% dplyr::group_by(continent,year) %&gt;% dplyr::summarize(mean_gdpPercap = mean(gdpPercap)) %&gt;% ggplot(aes(x=year,y=mean_gdpPercap,color=continent))+ geom_point()+ geom_line() 7.2.0.1 Exercise Plot the life expectancy over time of all countries for the years with population size larger than 2+06 gapminder %&gt;% dplyr::filter(pop&gt;=2e+06) %&gt;% ggplot(aes(x=year,y=gdpPercap,color=country))+ geom_point()+ geom_line()+ facet_wrap(~continent)+ theme(legend.position = &quot;none&quot;) 7.2.1 Some ggplot tricks Make sure your data is in the right format (wide vs long). Usually, ggplot requires the data in long format. The functions tidyr::pivot_wider() and tidyr::pivot_longer() are very useful to transform one into the other. ?tidyr::pivot_wider() ?tidyr::pivot_longer() To change the order of colors, modify the factor levels gapminder %&gt;% dplyr::group_by(continent,year) %&gt;% dplyr::mutate(continent = factor(as.character(continent), levels = c(&quot;Oceania&quot;,&quot;Europe&quot;,&quot;Africa&quot;,&quot;Americas&quot;,&quot;Asia&quot;))) %&gt;% dplyr::summarize(mean_gdpPercap = mean(gdpPercap)) %&gt;% ggplot(aes(x=year,y=mean_gdpPercap,color=continent))+ geom_point()+ geom_line() You can store the plots in an object and keep adding layers to it p&lt;-gapminder %&gt;% dplyr::group_by(continent,year) %&gt;% dplyr::mutate(continent = factor(as.character(continent), levels = c(&quot;Oceania&quot;,&quot;Europe&quot;,&quot;Africa&quot;,&quot;Americas&quot;,&quot;Asia&quot;))) %&gt;% dplyr::summarize(mean_gdpPercap = mean(gdpPercap)) %&gt;% ggplot(aes(x=year,y=mean_gdpPercap,color=continent))+ geom_point()+ geom_line() # Change the color palette p + scale_color_viridis_d(begin = 0.1,end=0.8) "],["real-life-application.html", "8 Real life application", " 8 Real life application How many clinics participated in the study, and how many valid tests were performed on each one? Did the number of daily tests vary over time? How many patients tested positive vs negative in the first 100 days of the pandemic? Do you notice any difference with the age of the patients? Hint: You can make two age groups and calculate the percentage each age group in positive vs negative tests, try using the function ifelse() to do this. Look at the specimen processing time to receipt, did the sample processing times improve over the first 100 days of the pandemic? Plot the median processing times of each day over the course of the pandemic and then compare the summary statistics of the first 50 vs the last 50 days Bonus: Higher viral loads are detected in less PCR cycles. What can you observe about the viral load of positive vs negative samples. Do you notice anything differences in viral load across ages in the positive samples? Hint: Also split the data into two age groups and try using geom_boxplot() library(medicaldata) covid&lt;-covid_testing dim(covid) ## [1] 15524 17 "],["software-development-concepts.html", "9 Software development concepts 9.1 Good coding practices 9.2 Debugging and troubleshooting", " 9 Software development concepts 9.1 Good coding practices 9.1.1 Script structure Use comments to create sections. Load all required packages at the very beginning. Write all function definitions after package loading section or create a standalone file for your functions and call it in the main code. 9.1.2 Functions Identify functions capitalizing the first letter of each word # Good DoNothing &lt;- function() { return(invisible(NULL)) } # Bad donothing &lt;- function() { return(invisible(NULL)) } Use explicit returns # Good AddValues &lt;- function(x, y) { return(x + y) } # Bad AddValues &lt;- function(x, y) { x + y } Define what the functions does, the input parameters, and output using comments inside the function AddValues &lt;- function(x, y) { # Description: Function to add to numeric variables # Input # x = numeric # y = numeric # Output: numeric return(x + y) } Testing and documenting Use formal documentation for functions whenever you are writing more complicated projects. This documentation is written in separate .Rd files,and it turns into the documentation printed in the help files. The roxygen2 package allows R coders to write documentation alongside the function code and then process it into the appropriate .Rd files. Formal automated tests can be written using the testthat package. 9.1.3 External packages Packages are essentially bundles of functions with formal documentation. Loading your own functions through source(\"functions.R\") is similar to loading someone else’s using library(\"package\") As a general rule, only load a package using library() if you are going to use more than two functions from if. Use the name space when calling an external function. Not doing it can cause clashes when two packages have a function with the same name. # Good purrr::map() # Bad map() 9.2 Debugging and troubleshooting General advice: Create a minimal reproducible example of your error. Whenever you see an error copy the full message and paste it in the search bar on your web browser. There is a lot of support out there, and most likely someone came across that same error before. "],["references.html", "10 References", " 10 References Base R Cheat Sheet Google’s R Style Guide Mastering Software Development in R R for reproducible statistical analysis Medicaldata - covid testing dataset "],["solutions-data-types.html", "11 Solutions || Data Types 11.1 Atomic Classes 11.2 Vectors 11.3 Matrices 11.4 Lists 11.5 Data frames 11.6 Coercion", " 11 Solutions || Data Types 11.1 Atomic Classes Write a piece of code that stores a number in a variable and then check if it is greater than 5. Try to use comments! Bonus: Is there a way to store the result after checking the number? x &lt;- 10 x &gt; 5 ## [1] TRUE #Bonus y &lt;- x &gt; 5 print(y) ## [1] TRUE 11.1.1 11.2 Vectors Make a vector with the numbers 1 through 26. Multiply the vector by 2, and give the resulting vector names A through Z (hint: there is a built in vector called LETTERS). x &lt;- 1:26 x &lt;- x * 2 names(x) &lt;- LETTERS 11.3 Matrices Make a matrix with the numbers 1:50, with 5 columns and 10 rows. Did the matrix function fill your matrix by column, or by row, as its default behavior? Once you have figured it out, try to change the default. (hint: read the documentation for matrix) # By default the matrix is filled by columns, we can change this behavior using byrow=TRUE m&lt;-matrix(1:50,ncol = 5,nrow = 10,byrow = T) Bonus: Which of the following commands was used to generate the matrix below? matrix(c(4, 1, 9, 5, 10, 7), nrow = 3) matrix(c(4, 9, 10, 1, 5, 7), ncol = 2, byrow = TRUE) matrix(c(4, 9, 10, 1, 5, 7), nrow = 2) matrix(c(4, 1, 9, 5, 10, 7), ncol = 2, byrow = TRUE) matrix(c(4, 1, 9, 5, 10, 7), ncol = 2, byrow = TRUE) ## [,1] [,2] ## [1,] 4 1 ## [2,] 9 5 ## [3,] 10 7 11.4 Lists Create a list of length two containing a character vector for each of the data sections: (1) Data types and (2) Data structures. Populate each character vector with the names of the data types and data structures, respectively. dt &lt;- c(&#39;double&#39;, &#39;complex&#39;, &#39;integer&#39;, &#39;character&#39;, &#39;logical&#39;) ds &lt;- c(&#39;data.frame&#39;, &#39;vector&#39;, &#39;factor&#39;, &#39;list&#39;, &#39;matrix&#39;) data.sections &lt;- list(dt, ds) 11.5 Data frames There are several subtly different ways to call variables, observations and elements from data frames. Try them all and discuss with your team what they return. (Hint, use the function typeof()) iris[1] iris[[1]] iris$Species iris[\"Species\"] iris[1,1] iris[,1] iris[1,] # The single brace [1] returns the first slice of the list, as another list. In this case it is the first column of the data frame. iris[1] # The double brace [[1]] returns the contents of the list item. In this case it is the contents of the first column, a vector of type factor. iris[[1]] # This example uses the $ character to address items by name. Species is a vector of type factor. iris$Species # A single brace [&quot;Species&quot;] instead of the index number with the column name will also return a list like in the first example iris[&quot;Species&quot;] # First element of first row and first column. The returned element is an integer iris[1,1] # First column. Returns a vector iris[,1] # First row. Returns a list with all the values in the first row. iris[1,] 11.6 Coercion Take the list you created in 3 and coerce it into a data frame. Then change the names of the columns to “dataTypes” and “dataStructures” df&lt;-as.data.frame(data.sections) colnames(df)&lt;-c(&quot;dataTypes&quot;,&quot;dataStructures&quot;) "],["solutions-basic-data-manipulation.html", "12 Solutions || Basic Data Manipulation 12.1 Writing data 12.2 Exploring data frames", " 12 Solutions || Basic Data Manipulation library(gapminder) 12.1 Writing data Write a data processing snippet to include only the data points collected after 1995 in Asian countries as a CSV file asia&lt;-gapminder[gapminder$year &gt; 1995 &amp; gapminder$continent==&quot;Asia&quot;, ] write.table(asia, file = &quot;data/gapminder_after1995_asia.csv&quot;, sep = &quot;,&quot;, quote = FALSE, row.names = FALSE) Separate the gapminder data frame into 5 individual data frames, one for each continent. Store those 5 data frames as an RData file in the objects folder called continents.RData. asia&lt;-gapminder[gapminder$continent==&quot;Asia&quot;, ] africa&lt;-gapminder[gapminder$continent==&quot;Africa&quot;, ] oceania&lt;-gapminder[gapminder$continent==&quot;Oceania&quot;, ] europe&lt;-gapminder[gapminder$continent==&quot;Europe&quot;, ] americas&lt;-gapminder[gapminder$continent==&quot;Americas&quot;, ] save(asia,africa,oceania,europe,americas,file=&quot;objects/continents.RData&quot;) 12.2 Exploring data frames Finish exploring the gapminder data frame and: Find the number of rows and the number of columns Print the data type of each column Explain the meaning of everything that str(gapminder) prints dim(gapminder) typeof(gapminder$country) typeof(gapminder$continent) typeof(gapminder$year) typeof(gapminder$lifeExp) typeof(gapminder$pop) typeof(gapminder$gdpPercap) str(gapminder) In which years has the GDP of Canada been larger than the average of all data points? canada&lt;-gapminder[gapminder$country==&quot;Canada&quot;,] mgdp&lt;-mean(canada$gdpPercap) canada[canada$gdpPercap&gt;mgdp,&quot;year&quot;] Find the mean life expectancy of Switzerland before and after 2000 swiss&lt;-gapminder[gapminder$country==&quot;Switzerland&quot;,] mean(swiss[swiss$year&lt;2000,]$lifeExp) # Before mean(swiss[swiss$year&gt;2000,]$lifeExp) # After You discovered that all the entries from 2007 are actually from 2008. Create a copy of the full gapminder data frame in an object called gp. Then change the year column to correct the entries from 2007. gp&lt;-gapminder gp[gp$year==2007,&quot;year&quot;]&lt;-2008 gp[gp$year==2008,] Bonus - Find the mean life expectancy and mean gdp per continent using the function tapply tapply(gapminder$lifeExp,gapminder$continent,mean) tapply(gapminder$lifeExp,gapminder$continent,mean) "],["solutions-adv.-data-manipulation.html", "13 Solutions || Adv. Data Manipulation", " 13 Solutions || Adv. Data Manipulation suppressPackageStartupMessages(library(gapminder)) suppressPackageStartupMessages(library(dplyr)) Write one command ( can span multiple lines) using pipes that will output a data frame that has only the columns lifeExp, country and year for the records before the year 2000 from African countries, but not for other Continents. tidy_africa &lt;- gapminder %&gt;% dplyr::filter(continent == &quot;Africa&quot;) %&gt;% dplyr::select(year, country, lifeExp) head(tidy_africa) ## # A tibble: 6 × 3 ## year country lifeExp ## &lt;int&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 1952 Algeria 43.1 ## 2 1957 Algeria 45.7 ## 3 1962 Algeria 48.3 ## 4 1967 Algeria 51.4 ## 5 1972 Algeria 54.5 ## 6 1977 Algeria 58.0 Calculate the average life expectancy per country. Which country has the longest average life expectancy and which one the shortest average life expectancy? gapminder %&gt;% dplyr::group_by(country) %&gt;% dplyr::summarize(mean_lifeExp = mean(lifeExp)) %&gt;% dplyr::filter(mean_lifeExp == min(mean_lifeExp) | mean_lifeExp == max(mean_lifeExp)) ## # A tibble: 2 × 2 ## country mean_lifeExp ## &lt;fct&gt; &lt;dbl&gt; ## 1 Iceland 76.5 ## 2 Sierra Leone 36.8 In the previous hands-on you discovered that all the entries from 2007 are actually from 2008. Write a command to edit the data accordingly using pipes. In the same command filter only the entries from 2008 to verify the change. gapminder %&gt;% dplyr::mutate(year = ifelse(year==2007,2008,year)) %&gt;% dplyr::filter(year==2008) %&gt;% head() ## # A tibble: 6 × 6 ## country continent year lifeExp pop gdpPercap ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Afghanistan Asia 2008 43.8 31889923 975. ## 2 Albania Europe 2008 76.4 3600523 5937. ## 3 Algeria Africa 2008 72.3 33333216 6223. ## 4 Angola Africa 2008 42.7 12420476 4797. ## 5 Argentina Americas 2008 75.3 40301927 12779. ## 6 Australia Oceania 2008 81.2 20434176 34435. "],["solutions-medical-data.html", "14 Solutions || Medical Data 14.1 Clinics included 14.2 Number of positive tests 14.3 Processing times 14.4 Bonus - Viral load", " 14 Solutions || Medical Data suppressPackageStartupMessages(library(ggplot2)) suppressPackageStartupMessages(library(medicaldata)) suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(tidyr)) Use the covid_testing data set and everything you’ve learned so far to answer the following questions: 14.1 Clinics included How many clinics participated in the study, and how many valid tests were performed on each one? Did the testing trend vary over time? covid&lt;-covid_testing 14.1.1 Number of clinics clinics&lt;- covid %&gt;% dplyr::select(subject_id,clinic_name,result,pan_day) %&gt;% dplyr::distinct() length(unique(clinics$clinic_name)) ## [1] 88 14.1.2 Number of valid tests clinics %&gt;% dplyr::filter(result!=&quot;invalid&quot;) %&gt;% dplyr::group_by(clinic_name) %&gt;% dplyr::summarize(n_test = length(clinic_name)) %&gt;% dplyr::arrange(desc(n_test)) ## # A tibble: 88 × 2 ## clinic_name n_test ## &lt;chr&gt; &lt;int&gt; ## 1 clinical lab 7397 ## 2 emergency dept 3353 ## 3 oncology day hosp 509 ## 4 nicu 285 ## 5 laboratory 262 ## 6 picu 258 ## 7 care ntwk 231 ## 8 line clinical lab- 218 ## 9 inpatient ward a 207 ## 10 radiation oncology 161 ## # ℹ 78 more rows 14.1.3 Testing trend over time covid %&gt;% filter(pan_day&lt;=100) %&gt;% group_by(pan_day) %&gt;% summarize(n=length(result)) %&gt;% ggplot(.,aes(x=pan_day,y=n))+ geom_point()+ geom_line()+ ylab(&quot;Number of tests per day&quot;)+ xlab(&quot;Pandemic day&quot;) 14.2 Number of positive tests How many patients tested positive vs negative in the first 100 days of the pandemic? Do you notice any difference with the age of the patients? Hint: You can make two age groups and calculate the percentage each age group in positive vs negative tests. 14.2.1 Number of positive tests in the first 100 days covid %&gt;% filter(result!=&quot;invalid&quot; &amp; pan_day&lt;=100) %&gt;% group_by(result) %&gt;% summarize(n=length(subject_id)) ## # A tibble: 2 × 2 ## result n ## &lt;chr&gt; &lt;int&gt; ## 1 negative 13225 ## 2 positive 780 14.2.2 Tests by age group tsts_age&lt;-covid %&gt;% filter(result!=&quot;invalid&quot; &amp; pan_day&lt;=100) %&gt;% mutate(age_group=ifelse(age&lt;=21,&quot;children&quot;,&quot;adults&quot;)) %&gt;% group_by(age_group,result) %&gt;% summarize(n=length(subject_id)) %&gt;% mutate(percent_total=n/sum(n)*100) ## `summarise()` has grouped output by &#39;age_group&#39;. You can override using the `.groups` argument. tsts_age ## # A tibble: 4 × 4 ## # Groups: age_group [2] ## age_group result n percent_total ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 adults negative 2627 92.1 ## 2 adults positive 226 7.92 ## 3 children negative 10598 95.0 ## 4 children positive 554 4.97 14.3 Processing times Look at the specimen processing time to receipt, did the sample processing times improve over the first 100 days of the pandemic? Plot the median processing times of each day over the course of the pandemic and then compare the summary statistics of the first 50 vs the last 50 days covid %&gt;% group_by(pan_day) %&gt;% dplyr::summarise(median_col_rec_tat=median(col_rec_tat)) %&gt;% ggplot(.,aes(x=pan_day,y=median_col_rec_tat)) + geom_point()+ geom_line() covid %&gt;% mutate(pan_day_group=ifelse(pan_day&lt;50,&quot;first_50&quot;,&quot;last_50&quot;)) %&gt;% group_by(pan_day_group) %&gt;% dplyr::summarise(mean_col_rec_tat=mean(col_rec_tat), median_col_rec_tat=median(col_rec_tat), min_col_rec_tat=min(col_rec_tat), max_col_rec_tat=max(col_rec_tat)) ## # A tibble: 2 × 5 ## pan_day_group mean_col_rec_tat median_col_rec_tat min_col_rec_tat max_col_rec_tat ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 first_50 3.26 1.9 0 865. ## 2 last_50 9.41 1.9 0 61370. 14.4 Bonus - Viral load Higher viral loads are detected in less PCR cycles. What can you observe about the viral load of positive vs negative samples. Do you notice anything differences in viral load across ages in the positive samples? Hint: Also split the data into two age groups and try using geom_boxplot() ggplot(covid,aes(y=ct_result,x=result,color=result))+ geom_boxplot() covid %&gt;% mutate(age_group=ifelse(age&lt;=21,&quot;children&quot;,&quot;adults&quot;)) %&gt;% ggplot(.,aes(y=ct_result,x=result,color=age_group))+ geom_boxplot() "],["workshop-slides.html", "15 Workshop Slides", " 15 Workshop Slides This browser does not support PDFs. Please download the PDF to view it: Download PDF. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
